






## Clojure and Overtone
































# Clojure Intro























# Basic types

* int     => 42
* double  => 42.0
* ratio   => 42 / 3

* string  => "foo27"
* regexp  => #"foo[0-9]*"
* keyword => :foo
* symbol  => foo

* boolean => true, false






# Data structures

* list    => (1 2 3)
* vector  => [:foo :bar :baz]
* map     => {:foo 1 :bar 2 :baz "asdf"}
* set     => #{:foo :bar :baz}

(:foo {:foo 1 :bar 2 :baz "asdf"})
; => 1

(nth [1 2 3] 2)
; => 3







# Vars

(def foo 22)
(def bar "test string")

(def add-2 (fn [v] (+ v 2)))

(defn sub-5
  [v]
  (- v 5))










# Functions

(defn hello-world
  []
  (println "hello world"))


(defn distance
  [{x1 :x y1 :y} {x2 :x y2 :y}]
  (let [dx (- x2 x1)
        dy (- y2 y1)]
    (Math/sqrt (+ (* dx dx)
                  (* dy dy)))))







# Apache Commons isBlank function

	isBlank(str) {
    every ch in str {
			if ((Character.isWhitespace(str.charAt(i)) == false)) {
				return false; }
		}
		return true; }




- types
- class declaration
- replace for loop with higher order function (block) every ch in str
- remove corner case if stmt (every doesn't just iterate, returns a value)
- lispify









(defn blank? [s]
  (every? #(Character/isWhitespace %) s))


















## Digital Audio 101:

* pressure waves

* frequency, amplitude

* [waveform] -> DAC -> speaker -> ear













# Synthesizers


Music Making
-------------

* playing notes
* metronome
* recursion in time
* arpeggiator

Oscillators:

- sin-osc
 * no harmonics
- saw
 * all integer harmonics
 * violins and cellos
- square (lf-pulse ...)
 * odd integer harmonics
- triangle (lf-tri ...)
 * odd harmonics with faster roll-off of higher freqs
- noise, white and pink

Filters:
- lpf and rlpf
- hpf rhpf
- bpf
- lag, decay
- resonz (really strong filter, emphasize a band)

LFOs:
- sin, square
- sample and hold

Envelopes and Control:
- line, x-line
- lf-noise0
- perc
- gate and notes



## Thanks to everyone

* Overtone, Clojure, toplap community






