
# how ugen functions are defined

## intializing the base specs.

first all specs are loaded,
and any spec with a :derived property is merged with it's
parent, the child properties overwriting the parent's.

then comes mode initialization. all args are assigned a mode.
if the arg does not have an explicitly statetd mode, then
the arg-name-mode-map is searched. if there is no mode in
the name map, then the default mode is :standard. at this
time a boolean :expanded property is also added to each
arg entry, depending on the mode of the arg.

then an expansion spec is derived from the :expanded properties.
it is just a vector of booleans and is assigned to the :expansion-spec
property. this is later used during MCE

## function generation

for each rate of each initilized ugen spec, a ugen function is defined.

### naming

if there is only one rate defined in the spec then the function name
is not rate qualified (i.e. having :xr postpended), if there are
more than one and the rate is :ar or :kr then it is qualified by
default. in all cases, if the rate is :ir or :dr then it is not
qualified. the base name for the function is given by
(normalize-name (spec :name)). 

if an :fn-names map is defined as a property in the
spec, then the names given under each rate key are
used instead. if a key in the fn-names map is missing
for one of the rates, then the above method is used
to generate the name for that particular rate.

## synth def time

### multi-channel expansion (MCE)

when a ugen function is called. the args and the
expansion-spec are passed to the expand function.
which then calls the ugen function potentially multiple 
times. 

### init

if the spec has an init fuction, which should have args
[rate args spec], then this function is called. 
if the function returns a vector, then those are used
for the args, if it returns a map, then two keys should be
defined. :args and :num-outs.

### post init

after the init function returns, given there is any, then the
args are massaged. the args with a mode which require them to
be popped, are popped. the args which need to be transformed are
transformed, etc. then possibly scalar values are wrapped in
some datastructure (TODO not sure about that).

### check

if a :check function with args [rate num-outs inputs spec]
is defined, then it is called last before the ugen is added
to the synth graph. if the check function returns a string
then it is considered an error and an exception is thrown.

---------------------------------------------------------------

the anatomy of a spec map

:name     mandatory string; containing the sc lang UGen name
:derived  optional string; containing the name of a spec to merge
          with. note that properties marked mandatory can also be
          specified through derive. properties in the spec
          containing the derived statement take precedence over
          properties in the "parent"
:args     mandatory vector; containing the argument spec maps each of
          which has the following form:
          :name     mandatorty string; the arg's name
          :default  optional; the default value if none given at synthdef time
                    note that there must not ever be any args with
                    defaults followed by args without them
          :map   a map that the arg will be looked up in
                 if a value exists for key arg then that
                 is used, else the arg is used 
          :mode     optional symbol;
                    :not-expanded stops multi channel expansion on
                                  thearg
                    :prepend-sequence the arg will not be expanded
                            and will be removed from it's position
                            in the inputs and concatenated to their
                            tail end. if there are several args in
                            this mode then they will be prepended
                            in argument order. args named
                            channelsArray are implicitely this mode
                    :prepend-sequence-set-num-outs
                            same as above, but also sets num-outs
                             via (count arg)
                    :num-outs will not be expanded & will be
                              removed from the input sequence,
                              and will determine the number
                              of output channels. arguments with
                              the name "numChannels" are implicitly
                              in this mode
                    :done-action will not be expanded and will be
                              mapped to the integer code for the
                              action. args named "doneAction" are
                              implicitly in this mode
                    :as-ar  the argument is converted to audio rate
                           using the k2a ugen, if it is not already
                           audio rate. this is only done if the rate
                           of the ugen is :ar
:num-outs optional, the number of fixed outputs, defaults to 1 if
          unspecified. it is unneeded if there is a :mode :num-outs
          or if a :num-outs is defined in a map returned from :init
:init     optional, a function which must take the args [rate args spec] 
          it should return a sequence of the new modified args or a
          map with keys :args and :num-outs if they need to be manually
          determined
:check    optional, a function which takes the args
              [rate num-outs inputs spec]
              this is called after init (if specified) and should
              return an error string or nil if no error
